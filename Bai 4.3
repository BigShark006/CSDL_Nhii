#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// ===== Cấu trúc Node =====
typedef struct Node {
    int data;
    struct Node *left, *right;
} Node;

// ===== Khởi tạo Node mới =====
Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// ===== Thêm phần tử =====
Node* insertNode(Node* root, int value) {
    if (root == NULL) return createNode(value);
    if (value < root->data)
        root->left = insertNode(root->left, value);
    else if (value > root->data)
        root->right = insertNode(root->right, value);
    return root;
}

// ===== Xuất tăng dần (LNR) =====
void printAscending(Node* root) {
    if (root != NULL) {
        printAscending(root->left);
        printf("%d ", root->data);
        printAscending(root->right);
    }
}

// ===== Xuất giảm dần (RNL) =====
void printDescending(Node* root) {
    if (root != NULL) {
        printDescending(root->right);
        printf("%d ", root->data);
        printDescending(root->left);
    }
}

// ===== Kiểm tra có phải BST hợp lệ =====
bool isBSTUtil(Node* root, int min, int max) {
    if (root == NULL) return true;
    if (root->data <= min || root->data >= max) return false;
    return isBSTUtil(root->left, min, root->data) && isBSTUtil(root->right, root->data, max);
}
bool isBST(Node* root) {
    return isBSTUtil(root, -999999, 999999);
}

// ===== Kiểm tra cây đầy đủ =====
bool isFullTree(Node* root) {
    if (root == NULL) return true;
    if ((root->left == NULL && root->right != NULL) || (root->left != NULL && root->right == NULL))
        return false;
    return isFullTree(root->left) && isFullTree(root->right);
}

// ===== Tìm cha của nút chứa khóa x =====
Node* findParent(Node* root, int x) {
    if (root == NULL || root->data == x) return NULL;
    if ((root->left && root->left->data == x) || (root->right && root->right->data == x))
        return root;
    if (x < root->data)
        return findParent(root->left, x);
    else
        return findParent(root->right, x);
}

// ===== Đếm số nút lá =====
int countLeaf(Node* root) {
    if (root == NULL) return 0;
    if (root->left == NULL && root->right == NULL) return 1;
    return countLeaf(root->left) + countLeaf(root->right);
}

// ===== Đếm nút giữa =====
int countInternal(Node* root) {
    if (root == NULL || (root->left == NULL && root->right == NULL)) return 0;
    return 1 + countInternal(root->left) + countInternal(root->right);
}

// ===== Kích thước (tổng số node) =====
int treeSize(Node* root) {
    if (root == NULL) return 0;
    return 1 + treeSize(root->left) + treeSize(root->right);
}

// ===== Độ sâu / chiều cao =====
int treeHeight(Node* root) {
    if (root == NULL) return 0;
    int lh = treeHeight(root->left);
    int rh = treeHeight(root->right);
    return (lh > rh ? lh : rh) + 1;
}

// ===== Tìm giá trị nhỏ nhất / lớn nhất =====
int findMin(Node* root) {
    if (root == NULL) return -1;
    while (root->left) root = root->left;
    return root->data;
}
int findMax(Node* root) {
    if (root == NULL) return -1;
    while (root->right) root = root->right;
    return root->data;
}

// ===== Tính tổng các giá trị =====
int sumTree(Node* root) {
    if (root == NULL) return 0;
    return root->data + sumTree(root->left) + sumTree(root->right);
}

// ===== Hủy toàn bộ cây =====
void destroyTree(Node* root) {
    if (root != NULL) {
        destroyTree(root->left);
        destroyTree(root->right);
        free(root);
    }
}

// ===== MAIN MENU =====
int main() {
    Node* root = NULL;
    int choice, value, n;

    do {
        printf("\n========== MENU BAI 3 ==========\n");
        printf("1. Nhap n phan tu vao cay\n");
        printf("2. Xuat danh sach tang dan\n");
        printf("3. Xuat danh sach giam dan\n");
        printf("4. Kiem tra cay nhi phan dung\n");
        printf("5. Kiem tra cay nhi phan day du\n");
        printf("6. Tim nut cha cua khoa x\n");
        printf("7. Dem so nut la, nut giua, kich thuoc cay\n");
        printf("8. Xac dinh do cao cua cay\n");
        printf("9. Tim gia tri nho nhat / lon nhat\n");
        printf("10. Tinh tong cac gia tri tren cay\n");
        printf("0. Thoat\n");
        printf("Chon: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Nhap so luong phan tu n: ");
                scanf("%d", &n);
                for (int i = 0; i < n; i++) {
                    printf("Nhap gia tri thu %d: ", i + 1);
                    scanf("%d", &value);
                    root = insertNode(root, value);
                }
                break;

            case 2:
                printf("Tang dan: ");
                printAscending(root);
                printf("\n");
                break;

            case 3:
                printf("Giam dan: ");
                printDescending(root);
                printf("\n");
                break;

            case 4:
                printf(isBST(root) ? "Day la cay nhi phan dung\n" : "Khong phai cay nhi phan dung\n");
                break;

            case 5:
                printf(isFullTree(root) ? "Day la cay day du\n" : "Khong phai cay day du\n");
                break;

            case 6:
                printf("Nhap khoa x: ");
                scanf("%d", &value);
                Node* parent = findParent(root, value);
                if (parent)
                    printf("Nut cha cua %d la: %d\n", value, parent->data);
                else
                    printf("Khong tim thay nut cha hoac nut la goc.\n");
                break;

            case 7:
                printf("So nut la: %d\n", countLeaf(root));
                printf("So nut giua: %d\n", countInternal(root));
                printf("Tong so nut: %d\n", treeSize(root));
                break;

            case 8:
                printf("Do cao cua cay: %d\n", treeHeight(root));
                break;

            case 9:
                printf("Gia tri nho nhat: %d\n", findMin(root));
                printf("Gia tri lon nhat: %d\n", findMax(root));
                break;

            case 10:
                printf("Tong cac gia tri tren cay: %d\n", sumTree(root));
                break;

            case 0:
                printf("Thoat.\n");
                break;

            default:
                printf("Lua chon khong hop le!\n");
        }
    } while (choice != 0);

    destroyTree(root);
    return 0;
}
